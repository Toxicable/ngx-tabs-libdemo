package(default_visibility = ["//:__subpackages__"])

load("@angular//:index.bzl", "ng_module", "ng_package")

# This build rule invokes the Angular compiler `ngc` on a
# single compilation unit. In this example, there is only
# one compilation unit in the repository, but if the library
# were larger, we would split up some subdirectories into
# separate Bazel "packages" with their own @NgModule class
# and ng_module build rule, so that we get benefits of
# incremental compilation only of the affected package.
ng_module(
    name = "src",
    srcs = glob(["*.ts"]),
    assets = glob([
        "*.css",
        "*.html",
    ]),
    # Normally the index bundle generator in ngc assumes there is an index.ts
    # in each package. We override it with the top-level exported API of this
    # package.
    tsconfig = "//:tsconfig.json",
    deps = ["//src/tokens"]
)


ng_package(
    # Note: currently this is also the name of the resulting bundles
    name = "ngx-tabs-libdemo",
    srcs = [
        "//:package.json", 
        "//src/tokens:package.json"
    ],
    entry_point = "index.js",
    deps = [":src", "//src/tokens"],
    secondary_entry_points = ["tokens"],

)
